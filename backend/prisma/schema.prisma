// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  password      String
  profile       Profile?
  socials       Social?
  memberOf      Member[]
  contactsSent  Contact[]      @relation("Contact")
  contactsRcvd  Contact[]
  messages      Message[]      @relation("Message")
  notifications Notification[]
  blockedUsers  BlockedUser[]  @relation("Blocked")
  blockedBy     BlockedUser[]
  reports       ReportUser[]
  tokenVersion  Int            @default(0)
  disabled      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @default(now()) @updatedAt
}

model Profile {
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String      @unique
  firstName    String?
  lastName     String?
  fullName     String?
  country      String?
  bio          String?
  profileImage String?
  discipline   Discipline? @relation(fields: [disciplineId], references: [id])
  disciplineId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @default(now()) @updatedAt

  @@id(userId)
}

model Social {
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @unique
  instagram  String?
  linkedin   String?
  dribbble   String?
  behance    String?
  pinterest  String?
  soundcloud String?
  spotify    String?
  medium     String?
  vimeo      String?
  youtube    String?
  github     String?
  discord    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt

  @@id(userId)
}

model Discipline {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  image     Image?    @relation(fields: [imageId], references: [id])
  imageId   String?
  profiles  Profile[]
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model Project {
  id          String          @id @default(uuid())
  title       String
  body        String
  country     String?
  chatRoom    ChatRoom?
  members     Member[]
  reports     ReportProject[]
  disciplines Discipline[]
  disabled    Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?       @default(now()) @updatedAt
}

model Member {
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  role       Role       @default(MEMBER)
  status     StatusCode @default(PENDING)
  readChatAt DateTime   @default(now())
  assignedAt DateTime   @default(now())
  updatedAt  DateTime?  @default(now()) @updatedAt

  @@id([userId, projectId])
}

model Contact {
  id                String     @unique @default(uuid())
  user              User       @relation("Contact", fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  userReadChatAt    DateTime   @default(now())
  contact           User       @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId         String
  contactReadChatAt DateTime   @default(now())
  chatRoom          ChatRoom?
  status            StatusCode @default(PENDING)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime?  @default(now()) @updatedAt

  @@id([userId, contactId])
}

model ChatRoom {
  id        String    @id @default(uuid())
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?   @unique
  contact   Contact?  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String?   @unique
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  body      String
  user      User?    @relation("Message", fields: [userId], references: [id])
  userId    String?
  chat      ChatRoom @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  createdAt DateTime @default(now())
}

model Notification {
  id               String           @id @default(uuid())
  senderId         String?
  projectId        String?
  receiver         User             @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId       String
  notificationCode NotificationCode
  read             Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @default(now()) @updatedAt
}

model ReportUser {
  id        String    @id @default(uuid())
  violation Violation @default(SPAM)
  title     String
  body      String?
  senderId  String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
}

model ReportProject {
  id        String    @id @default(uuid())
  violation Violation @default(SPAM)
  title     String
  body      String?
  senderId  String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime  @default(now())
}

model BlockedUser {
  user          User     @relation("Blocked", fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  blockedUser   User     @relation(fields: [blockedUserId], references: [id], onDelete: Cascade)
  blockedUserId String
  createdAt     DateTime @default(now())

  @@id([userId, blockedUserId])
}

model Image {
  id             String       @id @default(uuid())
  large          String?
  medium         String?
  small          String?
  alt            String?
  objectPosition String?
  Discipline     Discipline[]
  createdAt      DateTime     @default(now())
}

enum StatusCode {
  FALSE
  PENDING
  TRUE
}

enum Role {
  ADMIN
  MEMBER
}

enum Violation {
  SPAM
  HARRASMENT
  ADULTCONTENT
  PLAGIARISM
  SCAM
  FAKE
  SOMETHINGELSE
}

enum NotificationCode {
  PROJECT_DELETED
  PROJECT_TITLE_UPDATED
  PROJECT_INVITATION
  PROJECT_KICKED
  CONTACT_USERNAME_UPDATED
  CONTACT_REQUEST
  CONTACT_ACCEPTED
  ADMIN_ASSIGNED
}

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type AuthResponse {
  accessToken: String!
  user: User!
}

type BlockedUser {
  user: User!
  userId: String!
  blockedUser: User!
  blockedUserById: String!
  createdAt: DateTime!
}

"""Chat Inputs and Pagination"""
input ChatInput {
  after: String
  before: String
  first: Float
  last: Float
  id: String!
}

type ChatRoom {
  id: ID!
  project: Project
  projectId: ID!
  contact: Contact
  contactId: ID!
  messages: [Message!]
  createdAt: DateTime!
  updatedAt: DateTime
}

type ChatRoomResponse {
  unreadChatRooms: [ChatRoom!]
  readChatRooms: [ChatRoom!]
}

type Contact {
  id: ID!
  user: User
  userId: ID!
  userReadChatAt: DateTime!
  contact: Contact
  contactId: ID!
  contactReadChatAt: DateTime!
  chatRoom: ChatRoom
  status: StatusCode!
  createdAt: DateTime!
  updatedAt: DateTime
}

type ContactResponse {
  usersWithNewMessages: [User!]
  usersWithOldMessages: [User!]
}

type CountryResponse {
  key: ID!
  country: String!
}

"""Create Message"""
input CreateMessageInput {
  id: String!
  body: String!
}

"""Input Arguments for Project"""
input CreateProjectInput {
  title: String!
  body: String
  country: String
  disciplines: [Float!]
  members: [String!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Discipline {
  id: ID!
  title: String!
  profiles: [Profile!]
  projects: [Project!]
  createdAt: DateTime!
  updatedAt: DateTime
}

"""Login a User"""
input LoginInput {
  email: String!
  password: String!
}

type Member {
  user: User!
  userId: ID!
  project: Project
  projectId: ID!
  readChatAt: DateTime!
  role: Role!
  status: StatusCode!
  assignedAt: DateTime!
  updatedAt: DateTime
}

"""Input arguments for deleting a member from a project"""
input MemberInput {
  userId: ID!
  projectId: ID!
}

type Message {
  id: ID!
  body: String!
  user: User
  userId: ID!
  chatRoom: ChatRoom
  chatId: ID!
  createdAt: DateTime!
}

type Mutation {
  """Test Resolver Delete Later"""
  addTodo(data: Test!): TestResponse!

  """Creates a new User"""
  register(data: RegisterInput!): AuthResponse!

  """Login to an account"""
  login(data: LoginInput!): AuthResponse!

  """Update Username"""
  updateUsername(username: String!): String!

  """Update Email"""
  updateEmail(email: UpdateEmailInput!): String!

  """Update Password"""
  updatePassword(data: UpdatePasswordInput!): Boolean!

  """Logout from the currently logged in account"""
  logout: Boolean!

  """Sets disabled state to true, which will make user not visible"""
  deleteAccount: Boolean!

  """Update Profile"""
  updateProfile(data: UpdateProfileInput!): Profile!

  """Update Profile Image"""
  singleUpload(file: Upload!): UploadedFileResponse!

  """Update File"""
  uploadFile(file: Upload!): Boolean!

  """Creates a new Project"""
  createProject(data: CreateProjectInput!): Project!

  """Deletes a Project by projectId"""
  deleteProject(id: String!): Boolean!

  """Leave Project by projectId"""
  leaveProject(id: String!): Boolean!

  """Updates a Project by id"""
  updateProjectDetails(data: UpdateProjectInput!): Project!

  """Add member to project, by project id"""
  addMember(data: MemberInput!): Member!

  """Delete member from project, by project id"""
  deleteMember(data: MemberInput!): Boolean!

  """Toggle Project disabled value to true or false"""
  toggleProjectDisabled(projectId: String!): Boolean!

  """Accept a project invitation"""
  acceptInvite(projectId: String!): Boolean!

  """Delete/decline a project invitation"""
  rejectInvite(projectId: String!): Boolean!

  """Update socials"""
  updateSocials(data: SocialInput!): Social!

  """Add Message to project, by project id"""
  projectAddMessage(data: CreateMessageInput!): Message!

  """Add Message to contact by contact id"""
  contactAddMessage(data: CreateMessageInput!): Message!

  """Block a user by id"""
  blockUserById(id: String!): Boolean!

  """Unblock a blocked user by id"""
  unblockUserById(id: String!): Boolean!

  """Report a User by id"""
  reportUser(data: ReportUserInput!): ReportUser!

  """Report a Project by id"""
  reportProject(data: ReportProjectInput!): ReportProject!

  """Add a user to contact list"""
  sendContactRequest(id: String!): Boolean!

  """Delete contact from contacts list"""
  deleteContact(id: String!): Boolean!

  """Accept contact request"""
  acceptContact(id: String!): Boolean!

  """Reject contact request"""
  rejectContact(id: String!): Boolean!
}

type Notification {
  id: ID!
  read: Boolean!
  message: String!
  user: User
  userId: ID!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""Pagination Args"""
input PaginationArgs {
  after: String
  before: String
  first: Float
  last: Float
}

"""Pagination Args With UserId Argument"""
input PaginationUserArgs {
  after: String
  before: String
  first: Float
  last: Float
  id: ID!
}

type Profile {
  user: User
  userId: ID!
  firstName: String
  lastName: String
  fullName: String
  country: String
  bio: String
  discipline: Discipline
  disciplineId: ID
  profileImage: String
  createdAt: DateTime!
  updatedAt: DateTime
}

type Project {
  id: ID!
  title: String!
  body: String
  country: String
  disciplines: [Discipline!]
  members: [Member!]
  reports: [ReportProject!]
  chatRoom: ChatRoom
  disabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""Filter Projects"""
input ProjectsFilterArgs {
  after: String
  before: String
  first: Float
  last: Float
  searchText: String
  disciplines: [Float!]
  country: String
  sort: Sort
}

type Query {
  """Returns all users/profiles that are not disabled"""
  users2(id: String!): User

  """Returns all users/profiles that are not disabled"""
  users(data: UsersFilterArgs!): [User!]

  """Returns a single user by ID"""
  userById(id: String!): User

  """Returns the "user" data for the user that is currently logged in """
  loggedInUser: User!

  """Returns countries based on search argument"""
  countries(search: String!): [CountryResponse!]

  """Returns logged in user profile"""
  loggedInProfile: Profile

  """Returns all projects that are not disabled"""
  projects(data: ProjectsFilterArgs!): [Project!]

  """Return project by projectId"""
  projectById(id: String!): Project

  """Return all projects by userId which are not disabled"""
  projectsByUserId(data: PaginationUserArgs!): [Project!]

  """Return all projects for the currently logged in user"""
  projectsByloggedInUser(data: PaginationArgs!): [Project!]

  """Returns the social data for the user that is currently logged in """
  socialsByLoggedInUser: Social!

  """Returns the social data for the user that is currently logged in """
  socialsByUserId(id: String!): Social!

  """Returns all projects chatRooms"""
  projectsChatRoom: ChatRoomResponse

  """Returns all contact chatRooms"""
  contactsChatRoom(data: SearchArgs!): ContactResponse

  """Return details for a project"""
  projectChatRoomDetails(id: String!): Project

  """Return details for a contact"""
  contactChatRoomDetails(id: String!): User

  """Return messages for a ChatRoom by projectId"""
  projectMessages(data: ChatInput!): [Message!]

  """Return messages for a ChatRoom by contactId"""
  contactMessages(data: ChatInput!): [Message!]

  """Returns all blocked users"""
  blockedUsers: [BlockedUser!]!

  """
  Query all notifications, project invitations & friend requests for logged in user
  """
  notificationsByLoggedInUser(data: PaginationArgs!): User

  """Returns all contacts for loggedInUser"""
  contacts: [User!]!
}

"""Create a new user"""
input RegisterInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
  confirmPassword: String!
}

type ReportProject {
  id: ID!
  violation: Violation!
  title: String!
  body: String
  senderId: String!
  project: Project
  projectId: String!
  createdAt: DateTime!
}

"""Input argument types for reporting a project"""
input ReportProjectInput {
  violation: Violation!
  title: String!
  body: String
  projectId: String!
}

type ReportUser {
  id: ID!
  violation: Violation!
  title: String!
  body: String
  senderId: String!
  user: User
  userId: String!
  createdAt: DateTime!
}

"""Input argument types for reporting a user"""
input ReportUserInput {
  violation: Violation!
  title: String!
  body: String
  userId: String!
}

"""Role enum for projects ADMIN/MEMBER"""
enum Role {
  ADMIN
  MEMBER
}

"""Search Args"""
input SearchArgs {
  after: String
  before: String
  first: Float
  last: Float
  searchText: String
}

type Social {
  user: User
  userId: ID!
  instagram: String
  linkedin: String
  dribbble: String
  behance: String
  pinterest: String
  soundcloud: String
  spotify: String
  medium: String
  vimeo: String
  youtube: String
  github: String
  discord: String
  createdAt: DateTime!
  updatedAt: DateTime
}

"""Input Arguments for social links"""
input SocialInput {
  instagram: String
  linkedin: String
  dribbble: String
  behance: String
  pinterest: String
  soundcloud: String
  spotify: String
  medium: String
  vimeo: String
  youtube: String
  github: String
  discord: String
}

"""Sort by most recent or oldest"""
enum Sort {
  desc
  asc
}

"""Status Code enum"""
enum StatusCode {
  FALSE
  PENDING
  TRUE
}

type Subscription {
  newMessage(chatId: String!): Message!
}

"""Test Input Type Delete Later"""
input Test {
  body: String!
  text: String!
}

"""Test Input Type Delete Later"""
type TestResponse {
  body: String!
  text: String!
}

"""Update Email Input"""
input UpdateEmailInput {
  email: String!
}

"""Update Password Input"""
input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
  confirmPassword: String!
}

"""Update Profile Input"""
input UpdateProfileInput {
  firstName: String
  lastName: String
  country: String
  bio: String
  disciplineId: Float
}

"""Input Arguments for Project"""
input UpdateProjectInput {
  id: ID!
  title: String!
  body: String
  country: String
  disciplines: [Float!]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadedFileResponse {
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type User {
  id: ID!
  username: String!
  email: String!
  profile: Profile
  socials: Social
  memberOf: [Member!]
  member: [Member!]
  contactsSent: [Contact!]
  contactsRcvd: [Contact!]
  Messages: [Message!]
  notifications: [Notification!]
  blockedUsers: [BlockedUser!]
  reports: [ReportUser!]
  tokenVersion: Int!
  disabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""Filter Users"""
input UsersFilterArgs {
  after: String
  before: String
  first: Float
  last: Float
  loggedInUserId: String
  searchText: String
  disciplines: [Float!]
  country: String
  sort: Sort
}

"""Violation enum"""
enum Violation {
  SPAM
  HARRASMENT
  ADULTCONTENT
  PLAGIARISM
  SCAM
  FAKE
  SOMETHINGELSE
}
